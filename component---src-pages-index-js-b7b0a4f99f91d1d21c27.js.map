{"version":3,"file":"component---src-pages-index-js-b7b0a4f99f91d1d21c27.js","mappings":"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","sources":["webpack://blog.jh8459.com/./src/pages/index.js","webpack://blog.jh8459.com/./src/utils/helpers.js"],"sourcesContent":["import React, { useCallback, useState, useEffect, useMemo } from 'react';\r\nimport { graphql, navigate } from 'gatsby';\r\nimport { useLocation } from '@reach/router';\r\nimport firebase from 'gatsby-plugin-firebase-v9.0';\r\nimport { getDatabase, ref, get } from 'firebase/database';\r\nimport Layout from '../layout';\r\nimport Seo from '../components/seo';\r\nimport Bio from '../components/bio';\r\nimport Post from '../models/post';\r\n\r\nimport { getUniqueCategories } from '../utils/helpers';\r\nimport PostTabs from '../components/post-tabs';\r\n\r\nfunction HomePage({ data }) {\r\n  const posts = data.allMarkdownRemark.edges.map(({ node }) => new Post(node));\r\n  const { author, language } = data.site.siteMetadata;\r\n  const categories = ['All', ...getUniqueCategories(posts)];\r\n  const featuredTabIndex = categories.findIndex((category) => category === 'featured');\r\n  const [tabIndex, setTabIndex] = useState(featuredTabIndex === -1 ? 0 : featuredTabIndex);\r\n\r\n  const location = useLocation();\r\n  const queryParams = new URLSearchParams(location.search);\r\n  const initialSortType = queryParams.get('sort') || 'date-desc';\r\n  const [sortType, setSortType] = useState(initialSortType);\r\n\r\n  const onTabIndexChange = useCallback((e, value) => setTabIndex(value), []);\r\n\r\n  const onSortChange = useCallback((e) => {\r\n    const newSortType = e.target.value;\r\n    setSortType(newSortType);\r\n\r\n    const newQueryParams = new URLSearchParams(location.search);\r\n    newQueryParams.set('sort', newSortType);\r\n    navigate(`${location.pathname}?${newQueryParams.toString()}`, { replace: true });\r\n  }, [location]);\r\n\r\n  const [viewCounts, setViewCounts] = useState({});\r\n  const [loadingViews, setLoadingViews] = useState(true); // Keep loading state here\r\n\r\n  useEffect(() => {\r\n    setLoadingViews(true); // Set loading to true when starting fetch\r\n    const database = getDatabase(firebase);\r\n    const postsRef = ref(database, 'posts');\r\n    get(postsRef)\r\n      .then((snapshot) => {\r\n        if (snapshot.exists()) {\r\n          setViewCounts(snapshot.val());\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error('Firebase read failed: ', error);\r\n      })\r\n      .finally(() => {\r\n        setLoadingViews(false); // Set loading to false after fetch completes (success or error)\r\n      });\r\n  }, []);\r\n\r\n  const sortedPosts = useMemo(() => {\r\n    const postsWithViews = posts.map((post) => ({\r\n      ...post,\r\n      views: viewCounts[post.slug.replace(/\\//g, '')]?.views || 0,\r\n    }));\r\n\r\n    switch (sortType) {\r\n      case 'title-asc':\r\n        return postsWithViews.sort((a, b) => a.title.localeCompare(b.title));\r\n      case 'views-desc':\r\n        return postsWithViews.sort((a, b) => b.views - a.views);\r\n      case 'date-asc':\r\n        return postsWithViews.sort((a, b) => new Date(a.date) - new Date(b.date));\r\n      case 'date-desc':\r\n      default:\r\n        return postsWithViews.sort((a, b) => new Date(b.date) - new Date(a.date));\r\n    }\r\n  }, [posts, viewCounts, sortType]);\r\n\r\n  return (\r\n    <Layout>\r\n      <Seo title=\"JHLog\" />\r\n      <Bio author={author} language={language} />\r\n      <PostTabs\r\n        posts={sortedPosts}\r\n        onChange={onTabIndexChange}\r\n        tabs={categories}\r\n        tabIndex={tabIndex}\r\n        showMoreButton\r\n        defaultThumbnail={data.defaultThumbnail}\r\n        sortType={sortType}\r\n        onSortChange={onSortChange}\r\n        loadingViews={loadingViews} // Pass loading state down\r\n      />\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default HomePage;\r\n\r\nexport const pageQuery = graphql`\r\n  query {\r\n    allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\r\n      edges {\r\n        node {\r\n          id\r\n          excerpt(pruneLength: 500, truncate: true)\r\n          timeToRead\r\n          frontmatter {\r\n            categories\r\n            title\r\n            date(formatString: \"YYYY.MM.DD\")\r\n            thumbnail # Add thumbnail here\r\n          }\r\n          fields {\r\n            slug\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    defaultThumbnail: file(relativePath: { eq: \"common/no-image.png\" }) {\r\n      childImageSharp {\r\n        gatsbyImageData(width: 100, height: 100, placeholder: BLURRED, formats: [AUTO, WEBP, AVIF])\r\n      }\r\n    }\r\n\r\n    site {\r\n      siteMetadata {\r\n        language\r\n        author {\r\n          name\r\n          bio {\r\n            role\r\n            description\r\n            thumbnail\r\n          }\r\n          social {\r\n            github\r\n            linkedIn\r\n            email\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","export const getUniqueCategories = (posts) => {\n  const categorySet = new Set();\n  posts.forEach(({ categories }) => categories.forEach((category) => categorySet.add(category)));\n  return [...categorySet].sort((a, b) => {\n    if (a === 'featured') return -1;\n    if (b === 'featured') return 1;\n    return 0;\n  });\n};\n"],"names":["_ref","data","posts","allMarkdownRemark","edges","map","_ref2","node","Post","author","language","site","siteMetadata","categories","concat","_toConsumableArray","categorySet","Set","forEach","category","add","sort","a","b","getUniqueCategories","featuredTabIndex","findIndex","tabIndex","setTabIndex","useState","location","useLocation","initialSortType","URLSearchParams","search","get","sortType","setSortType","onTabIndexChange","useCallback","e","value","onSortChange","newSortType","target","newQueryParams","set","navigate","pathname","toString","replace","viewCounts","setViewCounts","loadingViews","setLoadingViews","useEffect","database","getDatabase","firebase","postsRef","ref","then","snapshot","exists","val","catch","error","console","finally","sortedPosts","useMemo","postsWithViews","post","_viewCounts$post$slug","views","slug","title","localeCompare","Date","date","React","Layout","Seo","Bio","PostTabs","onChange","tabs","showMoreButton","defaultThumbnail"],"sourceRoot":""}