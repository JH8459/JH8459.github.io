{"version":3,"file":"component---src-templates-blog-template-js-cbfe8cbc914876b69b85.js","mappings":"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","sources":["webpack://blog.jh8459.com/./src/components/post-header/index.js","webpack://blog.jh8459.com/./src/components/post-navigator/index.js","webpack://blog.jh8459.com/./src/components/post-content/index.js","webpack://blog.jh8459.com/./src/components/giscus/index.js","webpack://blog.jh8459.com/./src/templates/blog-template.js"],"sourcesContent":["import { Link } from 'gatsby';\nimport React, { useState } from 'react';\nimport ViewCount from './view';\nimport { FaRegClock, FaCalendarAlt } from 'react-icons/fa';\n\nfunction PostHeader({ post, viewCount }) {\n  const [showTooltip, setShowTooltip] = useState(false);\n  const isNew =\n    Math.ceil((new Date().getTime() - new Date(post.date).getTime()) / (1000 * 3600 * 24)) <= 7;\n\n  return (\n    <header className=\"flex flex-col justify-center w-full pb-[10px] border-b border-[var(--post-card-border-color)] mt-[20px] mb-[40px] break-keep\">\n      <div className=\"categories mb-[5px] flex items-center\">\n        {post.emoji && <div className=\"text-[18px] mr-[4px]\">{post.emoji}</div>}\n        {post.categories.map((category) => (\n          <Link\n            className=\"category mr-[4px] font-semibold text-[var(--primary-text-color)] hover:underline text-[18px]\"\n            key={category}\n            to={`/posts/${category}`}\n          >\n            {category}\n          </Link>\n        ))}\n      </div>\n\n      <h1 className=\"relative title font-semibold text-[32px] text-[var(--primary-text-color)] mb-[6px] leading-[1.3]\">\n        <span className=\"relative\">\n          {post.title}\n          {isNew && (\n            <span\n              className=\"absolute top-[-10px] right-[-15px] text-red-500 font-bold text-base\"\n              style={{ textShadow: '1px 1px 2px rgba(0,0,0,0.3)' }}\n            >\n              N\n            </span>\n          )}\n        </span>\n      </h1>\n      <div className=\"info flex flex-wrap w-full leading-[1.5] text-base font-medium text-[var(--secondary-text-color)] justify-end items-center space-x-4\">\n        <button\n          type=\"button\"\n          className=\"relative cursor-pointer p-1 transition-all duration-200 hover:scale-105 bg-transparent border-none text-left font-medium text-[var(--secondary-text-color)] flex items-center\"\n          onMouseEnter={() => setShowTooltip(true)}\n          onMouseLeave={() => setShowTooltip(false)}\n          onFocus={() => setShowTooltip(true)}\n          onBlur={() => setShowTooltip(false)}\n        >\n          <FaRegClock className=\"w-4 h-4 mr-1\" />\n          <strong>{`${post.timeToRead} min`}</strong>\n          {showTooltip && (\n            <div className=\"absolute bottom-full left-1/2 -translate-x-1/2 w-max p-2 bg-black text-white text-xs rounded\">\n              {`이 게시글을 읽는데 ${post.timeToRead}분 정도의 시간이 소요될 것으로 예상됩니다.`}\n            </div>\n          )}\n        </button>\n        <ViewCount viewCount={viewCount} expectedDigits={4} />\n        <div className=\"flex items-center\">\n          <FaCalendarAlt className=\"w-4 h-4 mr-1\" /> {post.date}\n        </div>\n      </div>\n    </header>\n  );\n}\nexport default PostHeader;\n","import { Link } from 'gatsby';\nimport React from 'react';\n\n\nfunction PostNavigator({ prevPost, nextPost }) {\n  return (\n    <div className=\"grid w-full grid-cols-[49.3%_49.3%] gap-[1.4%] mt-[40px]\">\n      {nextPost && (\n        <Link className=\"post-card flex flex-col w-full border border-[var(--post-card-border-color)] rounded-[6px] p-[15px] text-[var(--primary-text-color)] cursor-pointer transition-transform duration-200 hover:scale-105 mr-auto\" key={nextPost.id} to={nextPost.slug}>\n          <div className=\"direction text-[14px] font-medium text-gray-500 mb-[5px]\">이전 글</div>\n          <div className=\"title text-[16px] font-semibold leading-[1.4]\">{nextPost.title}</div>\n          <div className=\"flex justify-between items-center mt-[5px]\">\n            <div className=\"flex items-center text-[14px] font-medium text-[var(--primary-text-color)]\">\n              {nextPost.emoji && <span className=\"mr-[4px]\">{nextPost.emoji}</span>}\n              {nextPost.categories && nextPost.categories.map((category) => (\n                <span key={category} className=\"mr-[4px]\">{category}</span>\n              ))}\n            </div>\n            <div className=\"text-[12px] text-[var(--secondary-text-color)]\">{nextPost.date}</div>\n          </div>\n        </Link>\n      )}\n      {prevPost && (\n        <Link className=\"post-card flex flex-col w-full border border-[var(--post-card-border-color)] rounded-[6px] p-[15px] text-[var(--primary-text-color)] cursor-pointer transition-transform duration-200 hover:scale-105 ml-auto\" key={prevPost.id} to={prevPost.slug}>\n          <div className=\"direction text-[14px] font-medium text-gray-500 mb-[5px]\">다음 글</div>\n          <div className=\"title text-[16px] font-semibold leading-[1.4]\">{prevPost.title}</div>\n          <div className=\"flex justify-between items-center mt-[5px]\">\n            <div className=\"flex items-center text-[14px] font-medium text-[var(--primary-text-color)]\">\n              {prevPost.emoji && <span className=\"mr-[4px]\">{prevPost.emoji}</span>}\n              {prevPost.categories && prevPost.categories.map((category) => (\n                <span key={category} className=\"mr-[4px]\">{category}</span>\n              ))}\n            </div>\n            <div className=\"text-[12px] text-[var(--secondary-text-color)]\">{prevPost.date}</div>\n          </div>\n        </Link>\n      )}\n    </div>\n  );\n}\n\nexport default PostNavigator;\n\n","import React from 'react';\n\n\nfunction PostContent({ html }) {\n  return (\n    <div className=\"flex flex-col justify-center w-full mb-[20px]\">\n      <div className=\"prose dark:prose-invert prose-img:mx-auto mx-auto w-full max-w-content\" dangerouslySetInnerHTML={{ __html: html }} />\n    </div>\n  );\n}\n\nexport default PostContent;\n\n","import React, { createRef, useEffect, useRef } from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nconst src = 'https://giscus.app/client.js';\n\nfunction Giscus() {\n  const rootElm = createRef();\n  const isGiscusLoaded = useRef(false);\n\n  const data = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          comments {\n            giscus {\n              repo\n              repoId\n              category\n              categoryId\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const { repo, repoId, category, categoryId } = data.site.siteMetadata.comments.giscus;\n\n  useEffect(() => {\n    if (!rootElm.current || isGiscusLoaded.current) return;\n\n    const storedIsDarkMode = localStorage.getItem('isDarkMode');\n    const giscus = document.createElement('script');\n    const giscusConfig = {\n      src,\n      'data-repo': repo,\n      'data-repo-id': repoId,\n      'data-category': category,\n      'data-category-id': categoryId,\n      'data-mapping': 'pathname',\n      'data-strict': '0',\n      'data-reactions-enabled': '1',\n      'data-emit-metadata': '0',\n      'data-input-position': 'bottom',\n      'data-theme': JSON.parse(storedIsDarkMode) ? 'dark' : 'light',\n      'data-lang': 'ko',\n      crossorigin: 'anonymous',\n      async: true,\n    };\n\n    Object.keys(giscusConfig).forEach((configKey) => {\n      giscus.setAttribute(configKey, giscusConfig[configKey]);\n    });\n\n    rootElm.current.appendChild(giscus);\n    isGiscusLoaded.current = true;\n  }, [rootElm, repo, repoId, category, categoryId]);\n\n  return <div id=\"giscus-comments\" ref={rootElm} />;\n}\n\nexport default Giscus;\n","import React, { useEffect, useState } from 'react';\r\nimport firebase from 'gatsby-plugin-firebase-v9.0';\r\nimport { getDatabase, ref, set, get, child, update } from 'firebase/database';\r\nimport { graphql } from 'gatsby';\r\nimport Layout from '../layout';\r\nimport Seo from '../components/seo';\r\nimport PostHeader from '../components/post-header';\r\nimport PostNavigator from '../components/post-navigator';\r\nimport Post from '../models/post';\r\nimport PostContent from '../components/post-content';\r\nimport Giscus from '../components/giscus';\r\n\r\nfunction BlogTemplate({ data }) {\r\n  const [viewCount, setViewCount] = useState(0);\r\n\r\n  const curPost = new Post(data.cur);\r\n  const prevPost = data.prev ? new Post(data.prev) : null;\r\n  const nextPost = data.next ? new Post(data.next) : null;\r\n  const { siteUrl, comments } = data.site?.siteMetadata;\r\n  const giscusRepo = comments?.giscus?.repo;\r\n\r\n  useEffect(() => {\r\n    if (!siteUrl) return;\r\n\r\n    const key = curPost.slug.replace(/\\//g, '');\r\n\r\n    const database = getDatabase(firebase);\r\n    const postRef = ref(database, 'posts/' + key);\r\n\r\n    get(child(ref(database), `posts/${key}`))\r\n      .then((snapshot) => {\r\n        if (snapshot.exists()) {\r\n          const currentViews = snapshot.val().views;\r\n\r\n          if (process.env.NODE_ENV !== 'development') {\r\n            const updatedViews = currentViews + 1;\r\n\r\n            update(postRef, { views: updatedViews });\r\n            setViewCount(updatedViews);\r\n          } else {\r\n            setViewCount(currentViews);\r\n          }\r\n        } else {\r\n          if (process.env.NODE_ENV !== 'development') {\r\n            // key 값이 존재하지 않으면 1으로 설정\r\n            set(postRef, { views: 1 });\r\n            setViewCount(1); // 상태 업데이트\r\n          }\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error('Firebase read failed: ', error);\r\n      });\r\n  }, [siteUrl, curPost.slug]);\r\n\r\n  return (\r\n    <Layout tableOfContents={curPost.tableOfContents}>\r\n      <Seo title={curPost?.title} description={curPost?.excerpt} />\r\n      <PostHeader post={curPost} viewCount={viewCount} />\r\n      <PostContent html={curPost.html} />\r\n      <PostNavigator prevPost={prevPost} nextPost={nextPost} />\r\n      <div className=\"mt-8 w-full\">\r\n        {giscusRepo && <Giscus repo={giscusRepo} path={curPost.slug} />}\r\n      </div>\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default BlogTemplate;\r\n\r\nexport const pageQuery = graphql`\r\n  query ($slug: String, $nextSlug: String, $prevSlug: String) {\r\n    cur: markdownRemark(fields: { slug: { eq: $slug } }) {\r\n      id\r\n      html\r\n      excerpt(pruneLength: 500, truncate: true)\r\n      timeToRead\r\n      tableOfContents\r\n      frontmatter {\r\n        date(formatString: \"YYYY.MM.DD\")\r\n        title\r\n        categories\r\n        author\r\n        emoji\r\n      }\r\n      fields {\r\n        slug\r\n      }\r\n    }\r\n\r\n    next: markdownRemark(fields: { slug: { eq: $nextSlug } }) {\r\n      id\r\n      frontmatter {\r\n        date(formatString: \"YYYY.MM.DD\")\r\n\r\n        title\r\n        categories\r\n        author\r\n        emoji\r\n      }\r\n      fields {\r\n        slug\r\n      }\r\n    }\r\n\r\n    prev: markdownRemark(fields: { slug: { eq: $prevSlug } }) {\r\n      id\r\n      frontmatter {\r\n        date(formatString: \"YYYY.MM.DD\")\r\n        title\r\n        categories\r\n        author\r\n        emoji\r\n      }\r\n      fields {\r\n        slug\r\n      }\r\n    }\r\n\r\n    site {\r\n      siteMetadata {\r\n        siteUrl\r\n        comments {\r\n          giscus {\r\n            repo\r\n            repoId\r\n            category\r\n            categoryId\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"names":["_ref","post","viewCount","showTooltip","setShowTooltip","useState","isNew","Math","ceil","Date","getTime","date","React","className","emoji","categories","map","category","Link","key","to","title","style","textShadow","type","onMouseEnter","onMouseLeave","onFocus","onBlur","FaRegClock","timeToRead","ViewCount","expectedDigits","FaCalendarAlt","prevPost","nextPost","id","slug","html","dangerouslySetInnerHTML","__html","rootElm","createRef","isGiscusLoaded","useRef","data","useStaticQuery","repo","repoId","categoryId","site","siteMetadata","comments","giscus","useEffect","current","storedIsDarkMode","localStorage","getItem","document","createElement","giscusConfig","src","JSON","parse","crossorigin","async","Object","keys","forEach","configKey","setAttribute","appendChild","ref","_data$site","_comments$giscus","setViewCount","curPost","Post","cur","prev","next","siteUrl","giscusRepo","replace","database","getDatabase","firebase","postRef","get","child","then","snapshot","exists","updatedViews","val","views","update","set","catch","error","console","Layout","tableOfContents","Seo","description","excerpt","PostHeader","PostContent","PostNavigator","Giscus","path"],"sourceRoot":""}