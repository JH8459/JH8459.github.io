{"version":3,"file":"component---src-templates-category-template-js-36c8a2207202d45f003a.js","mappings":"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","sources":["webpack://blog.jh8459.com/./src/components/category-page-header/index.js","webpack://blog.jh8459.com/./src/templates/category-template.js"],"sourcesContent":["import React from 'react';\n\nfunction CategoryPageHeader({ title, subtitle }) {\n  return (\n    <div className=\"flex flex-col items-center justify-center mt-[30px] mb-[30px]\">\n      <h1 className=\"w-fit pb-[7px] mb-[15px] text-[40px] font-bold text-center border-b-[3px] border-[var(--primary-text-color)]\">\n        {title}\n      </h1>\n      <p className=\"pb-[10px] text-[20px] font-medium text-center\">{subtitle}</p>\n    </div>\n  );\n}\n\nexport default CategoryPageHeader;\n","import React, { useMemo, useCallback, useState, useEffect } from 'react';\r\nimport { navigate } from 'gatsby';\r\nimport { useLocation } from '@reach/router';\r\nimport firebase from 'gatsby-plugin-firebase-v9.0';\r\nimport { getDatabase, ref, get } from 'firebase/database';\r\n\r\nimport Layout from '../layout';\r\nimport Seo from '../components/seo';\r\nimport Post from '../models/post';\r\nimport CategoryPageHeader from '../components/category-page-header';\r\nimport PostTabs from '../components/post-tabs';\r\n\r\nfunction CategoryTemplate({ pageContext }) {\r\n  const { edges, currentCategory, defaultThumbnail, categories } = pageContext;\r\n\r\n  const location = useLocation();\r\n  const queryParams = new URLSearchParams(location.search);\r\n  const initialSortType = queryParams.get('sort') || 'date-desc';\r\n  const [sortType, setSortType] = useState(initialSortType);\r\n\r\n  const posts = useMemo(() => edges.map(({ node }) => new Post(node)), [edges]);\r\n\r\n  const currentTabIndex = useMemo(\r\n    () => categories.findIndex((category) => category === currentCategory),\r\n    [categories, currentCategory],\r\n  );\r\n\r\n  const onTabIndexChange = useCallback(\r\n    (e, value) => {\r\n      if (value === 0) return navigate(`/posts`);\r\n      navigate(`/posts/${categories[value]}`);\r\n    },\r\n    [categories],\r\n  );\r\n\r\n  const onSortChange = useCallback((e) => {\r\n    const newSortType = e.target.value;\r\n    setSortType(newSortType);\r\n\r\n    const newQueryParams = new URLSearchParams(location.search);\r\n    newQueryParams.set('sort', newSortType);\r\n    navigate(`${location.pathname}?${newQueryParams.toString()}`, { replace: true });\r\n  }, [location]);\r\n\r\n  const [viewCounts, setViewCounts] = useState({});\r\n  const [loadingViews, setLoadingViews] = useState(true); // Keep loading state here\r\n\r\n  useEffect(() => {\r\n    setLoadingViews(true); // Set loading to true when starting fetch\r\n    const database = getDatabase(firebase);\r\n    const postsRef = ref(database, 'posts');\r\n    get(postsRef)\r\n      .then((snapshot) => {\r\n        if (snapshot.exists()) {\r\n          setViewCounts(snapshot.val());\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error('Firebase read failed: ', error);\r\n      })\r\n      .finally(() => {\r\n        setLoadingViews(false); // Set loading to false after fetch completes (success or error)\r\n      });\r\n  }, []);\r\n\r\n  const sortedPosts = useMemo(() => {\r\n    const postsWithViews = posts.map((post) => ({\r\n      ...post,\r\n      views: viewCounts[post.slug.replace(/\\//g, '')]?.views || 0,\r\n    }));\r\n\r\n    switch (sortType) {\r\n      case 'title-asc':\r\n        return postsWithViews.sort((a, b) => a.title.localeCompare(b.title));\r\n      case 'views-desc':\r\n        return postsWithViews.sort((a, b) => b.views - a.views);\r\n      case 'date-asc':\r\n        return postsWithViews.sort((a, b) => new Date(a.date) - new Date(b.date));\r\n      case 'date-desc':\r\n      default:\r\n        return postsWithViews.sort((a, b) => new Date(b.date) - new Date(a.date));\r\n    }\r\n  }, [posts, viewCounts, sortType]);\r\n\r\n  return (\r\n    <Layout>\r\n      <Seo title=\"Posts\" />\r\n      <CategoryPageHeader title={categories[currentTabIndex]} subtitle={`${posts.length} posts`} />\r\n      <PostTabs\r\n        tabIndex={currentTabIndex}\r\n        onChange={onTabIndexChange}\r\n        tabs={categories}\r\n        posts={sortedPosts}\r\n        defaultThumbnail={defaultThumbnail}\r\n        sortType={sortType}\r\n        onSortChange={onSortChange}\r\n        loadingViews={loadingViews} // Pass loading state down\r\n      />\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default CategoryTemplate;\r\n"],"names":["_ref","title","subtitle","React","className","pageContext","edges","currentCategory","defaultThumbnail","categories","location","useLocation","initialSortType","URLSearchParams","search","get","sortType","setSortType","useState","posts","useMemo","map","_ref2","node","Post","currentTabIndex","findIndex","category","onTabIndexChange","useCallback","e","value","navigate","onSortChange","newSortType","target","newQueryParams","set","pathname","toString","replace","viewCounts","setViewCounts","loadingViews","setLoadingViews","useEffect","database","getDatabase","firebase","postsRef","ref","then","snapshot","exists","val","catch","error","console","finally","sortedPosts","postsWithViews","post","_viewCounts$post$slug","views","slug","sort","a","b","localeCompare","Date","date","Layout","Seo","CategoryPageHeader","length","PostTabs","tabIndex","onChange","tabs"],"sourceRoot":""}