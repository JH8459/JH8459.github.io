{"componentChunkName":"component---src-templates-blog-template-js","path":"/2025-03-31-PROJECT/","result":{"data":{"cur":{"id":"339c4b95-e05a-5ddc-8f1f-eb9e6ff88faf","html":"<img src=\"https://jh8459.s3.ap-northeast-2.amazonaws.com/blog/2025-03-31-PROJECT/banner.png\">\n<br>\n<h2 id=\"왜-ec2에서-nas로-옮기게-되었는가\" style=\"position:relative;\"><a href=\"#%EC%99%9C-ec2%EC%97%90%EC%84%9C-nas%EB%A1%9C-%EC%98%AE%EA%B8%B0%EA%B2%8C-%EB%90%98%EC%97%88%EB%8A%94%EA%B0%80\" aria-label=\"왜 ec2에서 nas로 옮기게 되었는가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>왜 EC2에서 NAS로 옮기게 되었는가?</h2>\n<p>사용 중인 NAS의 사용성이 DSM 7.2+ (Synology사의 DS920+ 기준) 부터 많이 달라졌다. 단순히 UI/UX만 변경된것이 아니라 (구)Docker 패키지에서 변경된 <strong>Container Manager 패키지</strong>는 다중 컨테이너 환경을 지원한다.</p>\n<br>\n<img src=\"https://jh8459.s3.ap-northeast-2.amazonaws.com/blog/2025-03-31-PROJECT/container_manager.jpg\">\n<center>Docker Compose! 😲</center><br><br>\n<p>EC2 t2.micro 인스턴스로 사용 중이던 서버에 올려둔 컨테이너 기반의 <a href=\"https://blog.jh8459.com/2024-07-01-PROJECT/\" target=\"_blank\">프로젝트 (LOTTERY 🍀)</a>를 비용 효율적인 측면에서 마이그레이션하기 좋은 기회라 생각했다.</p>\n<p>EC2에서 NAS로 마이그레이션하는 과정과 Github Action + Docker Hub를 사용한 CI / CD 구축한 과정 또한 간략히 남겨 보려한다.</p>\n<br>\r\n<br>\n<h3 id=\"1-cicd-파이프라인-구성\" style=\"position:relative;\"><a href=\"#1-cicd-%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8-%EA%B5%AC%EC%84%B1\" aria-label=\"1 cicd 파이프라인 구성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. CI/CD 파이프라인 구성</h3>\n<hr>\n<p>전반적인 CI/CD는 <strong>Github Action</strong> + <strong>Docker Hub</strong> 를 활용하였으며, CI / CD 나누어 Github 저장소의 브런치를 활용해서 파이프라인을 구성하였다. (CI/CD 모두를 자동화는 아래와 같은 무중단 배포 전략까지 도입 후 수정할 예정이다.)</p>\n<blockquote>\n<p>👉 <a href=\"https://blog.jh8459.com/2025-03-16-TIL/\" target=\"_blank\">Docker Compose와 Traefik을 활용한 Blue/Green 배포 전략</a></p>\n</blockquote>\n<br>\n<img src=\"https://jh8459.s3.ap-northeast-2.amazonaws.com/blog/2025-03-31-PROJECT/pipeline.png\">\n<center>전반적인 CI/CD 흐름은 위 사진과 같이 진행된다. 🤖</center><br><br>\n<ol>\n<li>\n<p>Local Repository에서 작업한 결과물을 Github 원격 Remote Repository의 <code class=\"language-text\">master</code> 브런치로 Push 한다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">master</code> 브런치로 Commit이 Push되면 아래의 조건을 갖는 Github Action <strong>(CI)</strong> 이 동작한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build &amp; Push Docker Images (CI)\r\n\r\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\r\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'master'</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token punctuation\">...</span></code></pre></div>\n</li>\n<li>\n<p>Github Action Runner를 통해서 <code class=\"language-text\">master</code> 브런치에 올라간 코드를 기반으로 Docker Image가 빌드되고 빌드 성공시 Docker Hub에 Push한다.</p>\n</li>\n<li>\n<p>Github Action <strong>(CI)</strong> 이 성공하면 배포 준비가 완료된 상태이다. 배포가 필요하다면 <code class=\"language-text\">prod</code> 브런치로 PR을 날린다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">prod</code> 브런치로 PR이 Merge되면 아래의 조건을 갖는 Github Action <strong>(CD)</strong> 이 동작한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy to NAS (CD)\r\n\r\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\r\n  <span class=\"token key atrule\">pull_request</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'prod'</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token punctuation\">...</span></code></pre></div>\n</li>\n<li>\n<p>Github Action Runner를 통해서 NAS에 SSH접속이 이뤄지며 운영 환경에 알맞는 <code class=\"language-text\">.env</code> 환경변수 파일을 생성한다.</p>\n</li>\n<li>\n<p>Docker Hub에 올라간 Docker Image를 기반으로 NAS 서버에 배포를 진행한다.</p>\n</li>\n</ol>\n<br>\r\n<br>\n<h3 id=\"2-nas에서-환경-구성\" style=\"position:relative;\"><a href=\"#2-nas%EC%97%90%EC%84%9C-%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%84%B1\" aria-label=\"2 nas에서 환경 구성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. NAS에서 환경 구성</h3>\n<hr>\n<p>위에서 언급한 CI/CD 파이프라인을 구성하려면 NAS에도 아래와 같은 환경 구성이 필요하다.</p>\n<blockquote>\n<p>이용 중인 NAS의 OS는 <strong>Ubuntu OS</strong>가 아닌 Synology에서 개발된 자체 OS인 <strong>DSM</strong>을 사용하기 때문에, <code class=\"language-text\">sudo apt-get install git</code> 같은 CLI 명령어가 아닌 DSM 패키지 센터를 통해 아래와 같은 환경을 구성해줘야 한다.</p>\n</blockquote>\n<br>\r\n<br>\n<h4 id=\"2-1-container-manager-패키지-설치\" style=\"position:relative;\"><a href=\"#2-1-container-manager-%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%84%A4%EC%B9%98\" aria-label=\"2 1 container manager 패키지 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-1. Container Manager 패키지 설치</h4>\n<hr>\n<p>전반적인 <strong>Container Manager</strong>를 활용한 NAS 환경 구성은 서버 포럼의<a href=\"https://svrforum.com/nas/695302\" target=\"_blank\">“이제 시놀로지에서 Docker-compose를(?) DSM 7.2의 Container Mananger”</a>게시글을 보고 구성하였다. 🙏🙏🙏</p>\n<p>volume을 설정할때 디렉토리는 추후 <strong>docker-compose.yml</strong> 파일이 수정되는 경우에도 Github 원격 저장소의 <code class=\"language-text\">prod</code> 브런치의 코드를 내려받아 최신화되어야한다. (이를 염두하고 설정하자.)</p>\n<img src=\"https://jh8459.s3.ap-northeast-2.amazonaws.com/blog/2025-03-31-PROJECT/volume.png\">\n<br>\r\n<br>\n<h4 id=\"2-2-git-server-패키지-설치\" style=\"position:relative;\"><a href=\"#2-2-git-server-%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%84%A4%EC%B9%98\" aria-label=\"2 2 git server 패키지 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-2. Git Server 패키지 설치</h4>\n<hr>\n<p>CLI 명령으로 설치가 안되므로 DSM 패키지 센터의 <strong>Git Server</strong> 패키지를 내려 받아야 한다.</p>\n<img src=\"https://jh8459.s3.ap-northeast-2.amazonaws.com/blog/2025-03-31-PROJECT/git.png\">\n<br>\r\n<br>\n<h4 id=\"2-3-nas의-ssh-원격-접속-포트-허용\" style=\"position:relative;\"><a href=\"#2-3-nas%EC%9D%98-ssh-%EC%9B%90%EA%B2%A9-%EC%A0%91%EC%86%8D-%ED%8F%AC%ED%8A%B8-%ED%97%88%EC%9A%A9\" aria-label=\"2 3 nas의 ssh 원격 접속 포트 허용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-3. NAS의 SSH 원격 접속 포트 허용</h4>\n<hr>\n<p>CI/CD 과정에서 Github Action 통해서 NAS로 SSH 접속이 이뤄져야 하므로 해당 옵션을 허용해주자.</p>\n<img src=\"https://jh8459.s3.ap-northeast-2.amazonaws.com/blog/2025-03-31-PROJECT/ssh.png\">\n<br>\r\n<br>\n<h4 id=\"2-4-nas의-역방향-프록시-설정\" style=\"position:relative;\"><a href=\"#2-4-nas%EC%9D%98-%EC%97%AD%EB%B0%A9%ED%96%A5-%ED%94%84%EB%A1%9D%EC%8B%9C-%EC%84%A4%EC%A0%95\" aria-label=\"2 4 nas의 역방향 프록시 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-4. NAS의 역방향 프록시 설정</h4>\n<hr>\n<p>Ubuntu OS에서 웹 서버를 구성할 땐 <strong>traefik</strong> 혹은 <strong>nginx</strong>를 사용하여 역방향 프록시(Reverse Proxy) 서버 구성을 하였지만, DSM 기본 기능인 역방향 프록시 기능을 사용하여 도메인 소스와 NAS 내부 서비스를 맵핑 시켜주었다.</p>\n<img src=\"https://jh8459.s3.ap-northeast-2.amazonaws.com/blog/2025-03-31-PROJECT/reverse.png\">\n<br>\r\n<br>\n<h4 id=\"2-4-공유기-포트포워딩-설정\" style=\"position:relative;\"><a href=\"#2-4-%EA%B3%B5%EC%9C%A0%EA%B8%B0-%ED%8F%AC%ED%8A%B8%ED%8F%AC%EC%9B%8C%EB%94%A9-%EC%84%A4%EC%A0%95\" aria-label=\"2 4 공유기 포트포워딩 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-4. 공유기 포트포워딩 설정</h4>\n<hr>\n<p>홈 네트워크는 보통 공유기를 사용중일텐데 외부망을 통해 NAS에서 실행중인 어플리케이션에 도달하려면 공유기의 포트 포워딩 규칙을 허용해줘야 한다.</p>\n<p>어플리케이션이 NAS의 1111번 포트를 사용중이라면 아래와 같은 규칙을 허용해주어야 한다.</p>\n<p><img src=\"https://jh8459.s3.ap-northeast-2.amazonaws.com/blog/2025-03-31-PROJECT/port.png\"><br></p>\n<br>\r\n<br>\n<h3 id=\"3-github-actions-살펴보기\" style=\"position:relative;\"><a href=\"#3-github-actions-%EC%82%B4%ED%8E%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"3 github actions 살펴보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. GitHub Actions 살펴보기</h3>\n<hr>\n<p>기본적으로 <strong>Public</strong> 저장소이기 때문에 노출되면 안되는 값들은 Github Repository에서 제공하는 환경 변수를 통해 변인 요인들을 관리하고 있다.</p>\n<p>Github Action은 CI/CD 파이프라인이 모두 자동화되고 있진 않으므로 이미지 빌드를 담당하는 <strong>ci.yml</strong>과 NAS로 원격 접속하여 배포를 진행하는 <strong>cd.yml</strong> 두개로 분리하여 구성하였다.</p>\n<br>\r\n<br>\n<h4 id=\"3-1-ciyml\" style=\"position:relative;\"><a href=\"#3-1-ciyml\" aria-label=\"3 1 ciyml permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3-1. ci.yml</h4>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build &amp; Push Docker Images (CI)\r\n\r\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\r\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>master<span class=\"token punctuation\">]</span>\r\n\r\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\r\n  <span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> CI\r\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\r\n\r\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\r\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Checkout Repository\r\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v4\r\n\r\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Set up Docker Buildx\r\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> docker/setup<span class=\"token punctuation\">-</span>buildx<span class=\"token punctuation\">-</span>action@v3\r\n\r\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Login to DockerHub\r\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> docker/login<span class=\"token punctuation\">-</span>action@v3\r\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\r\n          <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.DOCKERHUB_USERNAME <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n          <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.DOCKERHUB_PASSWORD <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n\r\n      <span class=\"token comment\"># Build and push API</span>\r\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build and Push lottery_api_server Image\r\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\r\n          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/lottery_api_server:latest ./api\r\n          docker push ${{ secrets.DOCKERHUB_USERNAME }}/lottery_api_server:latest</span>\r\n\r\n      <span class=\"token comment\"># Build and push Crawler</span>\r\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build and Push lottery_crawler_server Image\r\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\r\n          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/lottery_crawler_server:latest ./crawler\r\n          docker push ${{ secrets.DOCKERHUB_USERNAME }}/lottery_crawler_server:latest</span>\r\n\r\n      <span class=\"token comment\"># Build and push Website</span>\r\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build and Push lottery_website Image\r\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\r\n          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/lottery_website:latest ./website\r\n          docker push ${{ secrets.DOCKERHUB_USERNAME }}/lottery_website:latest</span></code></pre></div>\n<br>\r\n<br>\n<h4 id=\"3-2-cdyml\" style=\"position:relative;\"><a href=\"#3-2-cdyml\" aria-label=\"3 2 cdyml permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3-2. cd.yml</h4>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy to NAS (CD)\r\n\r\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\r\n  <span class=\"token key atrule\">pull_request</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>prod<span class=\"token punctuation\">]</span>\r\n\r\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\r\n  <span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy to NAS\r\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\r\n\r\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\r\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Connect to NAS via SSH and deploy\r\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> appleboy/ssh<span class=\"token punctuation\">-</span>action@v0.1.6\r\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\r\n          <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.NAS_HOST <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n          <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.NAS_USER <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n          <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.NAS_PASSWORD <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n          <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.NAS_PORT <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n          <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\r\n            echo \"✅ NAS 접속 성공\"</span>\r\n\r\n            cd /volume1/docker/lottery\r\n\r\n            echo \"📦 COMMON .env 생성\"\r\n            <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">-</span>f .env <span class=\"token punctuation\">]</span> <span class=\"token important\">&amp;&amp;</span> rm .env\r\n            cat &lt;&lt;EOF <span class=\"token punctuation\">></span> .env\r\n            NODE_ENV=$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.NODE_ENV <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n            API_SERVER_PORT=$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.API_SERVER_PORT <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n            CRAWLER_SERVER_PORT=$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.CRAWLER_SERVER_PORT <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n            WEBSITE_PORT=$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.WEBSITE_PORT <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n            EOF\r\n\r\n            echo \"📦 API .env 생성\"\r\n            mkdir <span class=\"token punctuation\">-</span>p ./api\r\n            <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">-</span>f ./api/.env <span class=\"token punctuation\">]</span> <span class=\"token important\">&amp;&amp;</span> rm ./api/.env\r\n            cat &lt;&lt;EOF <span class=\"token punctuation\">></span> ./api/.env\r\n            DB_HOST=$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.DB_HOST <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n            DB_PORT=$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.DB_PORT <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n            DB_USER=$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.DB_USER <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n            DB_PASSWORD=$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.DB_PASSWORD <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n            DB_DATABASE=$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.DB_DATABASE <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n            API_NODE_ENV=$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.API_NODE_ENV <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n            API_SERVER_PORT=$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.API_SERVER_PORT <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n            API_EMAIL_USERNAME=$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.API_EMAIL_USERNAME <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n            API_EMAIL_PASSWORD=$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.API_EMAIL_PASSWORD <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n            API_EMAIL_HOST=$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.API_EMAIL_HOST <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n            API_EMAIL_PORT=$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.API_EMAIL_PORT <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n            API_EMAIL_FROM=$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.API_EMAIL_FROM <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n            API_REDIS_HOST=$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.API_REDIS_HOST <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n            API_REDIS_PORT=$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.API_REDIS_PORT <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n            API_SLACK_SIGNING_SECRET=$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.API_SLACK_SIGNING_SECRET <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n            API_SLACK_BOT_TOKEN=$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.API_SLACK_BOT_TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n            API_SLACK_CLIENT_ID=$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.API_SLACK_CLIENT_ID <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n            API_SLACK_CLIENT_SECRET=$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.API_SLACK_CLIENT_SECRET <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n            COMMON_GITHUB_TOKEN=$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.COMMON_GITHUB_TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n            SWAGGER_USERNAME=$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.SWAGGER_USERNAME <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n            SWAGGER_PASSWORD=$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.SWAGGER_PASSWORD <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n            EOF\r\n\r\n            echo \"📦 CRAWLER .env 생성\"\r\n            mkdir <span class=\"token punctuation\">-</span>p ./crawler\r\n            <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">-</span>f ./crawler/.env <span class=\"token punctuation\">]</span> <span class=\"token important\">&amp;&amp;</span> rm ./crawler/.env\r\n            cat &lt;&lt;EOF <span class=\"token punctuation\">></span> ./crawler/.env\r\n            DB_HOST=$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.DB_HOST <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n            DB_PORT=$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.DB_PORT <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n            DB_USER=$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.DB_USER <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n            DB_PASSWORD=$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.DB_PASSWORD <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n            DB_DATABASE=$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.DB_DATABASE <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n            CRAWLER_SERVER_PORT=$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.CRAWLER_SERVER_PORT <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n            COMMON_GITHUB_TOKEN=$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.COMMON_GITHUB_TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n            EOF\r\n\r\n            echo \"🌀 GitHub prod 브랜치 코드 최신화\"\r\n            git fetch origin\r\n            git reset <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>hard origin/prod\r\n\r\n            echo \"📁 필요한 디렉토리 생성\"\r\n            mkdir <span class=\"token punctuation\">-</span>p ./api/logs ./api/public ./api/resource\r\n            mkdir <span class=\"token punctuation\">-</span>p ./crawler/logs ./crawler/public ./crawler/resource\r\n            mkdir <span class=\"token punctuation\">-</span>p ./redis<span class=\"token punctuation\">-</span>data\r\n\r\n            echo \"🐳 Docker 이미지 Pull\"\r\n            /usr/local/bin/docker<span class=\"token punctuation\">-</span>compose pull\r\n\r\n            echo \"🧨 기존 컨테이너 중지\"\r\n            /usr/local/bin/docker<span class=\"token punctuation\">-</span>compose down\r\n\r\n            echo \"🚀 최신 이미지로 컨테이너 재시작\"\r\n            /usr/local/bin/docker<span class=\"token punctuation\">-</span>compose up <span class=\"token punctuation\">-</span>d\r\n\r\n            echo \"✅ 배포 완료 🎉\"</code></pre></div>\n<br>\r\n<br>\n<h2 id=\"-understanding\" style=\"position:relative;\"><a href=\"#-understanding\" aria-label=\" understanding permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤔 Understanding</h2>\n<p>사진이나 중요 자료 백업 목적으로 구매했던 NAS를 다양하게 활용할 수 있는 방법을 알게되었다. (또한, 얼마 안되지만 EC2로 매달 나가는 비용을 아낄 수 있게 되었다.)</p>\n<p>NAS의 스펙이 그리 좋지 않기에 훌륭한 서버까진 아니지만, 토이 프로젝트 정도는 거뜬히 소화할 수 있을거같다. (훌륭한 장난감이 생겼다 😀)</p>\n<p>EC2에서 Synology NAS로 옮겨온 이번 과정에서 가장 크게 느낀 점은, <strong>결국 중요한 건 도구가 아니라 흐름에 대한 이해</strong>를 하는게 가장 중요하다는 점이었다. 언어나 특정 프레임워크에 종속되지 말고 전반적인 CS 지식을 조금 더 공부해보고 싶어졌다.</p>\n<br>\r\n<br>","excerpt":"왜 EC2에서 NAS로 옮기게 되었는가? 사용 중인 NAS의 사용성이 DSM 7.2+ (Synology사의 DS920+ 기준) 부터 많이 달라졌다. 단순히 UI/UX만 변경된것이 아니라 (구)Docker 패키지에서 변경된 Container Manager 패키지는 다중 컨테이너 환경을 지원한다. EC2 t2.micro 인스턴스로 사용 중이던 서버에 올려둔 컨테이너 기반의 프로젝트 (LOTTERY 🍀)를 비용 효율적인 측면에서 마이그레이션하기 좋은 기회라 생각했다. EC2에서 NAS로 마이그레이션하는 과정과 Github Action + Docker Hub를 사용한 CI / CD 구축한 과정 또한 간략히 남겨 보려한다. 1. CI/CD 파이프라인 구성 전반적인 CI/CD는 Github Action + Docker Hub 를 활용하였으며, CI / CD 나누어 Github 저장소의 브런치를 활용해서 파이프라인을 구성하였다. (CI/CD 모두를 자동화는 아래와 같은 무중단 배포 전략까지 도…","timeToRead":4,"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EC%99%9C-ec2%EC%97%90%EC%84%9C-nas%EB%A1%9C-%EC%98%AE%EA%B8%B0%EA%B2%8C-%EB%90%98%EC%97%88%EB%8A%94%EA%B0%80\">왜 EC2에서 NAS로 옮기게 되었는가?</a></p>\n<ul>\n<li>\n<p><a href=\"#1-cicd-%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8-%EA%B5%AC%EC%84%B1\">1. CI/CD 파이프라인 구성</a></p>\n</li>\n<li>\n<p><a href=\"#2-nas%EC%97%90%EC%84%9C-%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%84%B1\">2. NAS에서 환경 구성</a></p>\n<ul>\n<li><a href=\"#2-1-container-manager-%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%84%A4%EC%B9%98\">2-1. Container Manager 패키지 설치</a></li>\n<li><a href=\"#2-2-git-server-%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%84%A4%EC%B9%98\">2-2. Git Server 패키지 설치</a></li>\n<li><a href=\"#2-3-nas%EC%9D%98-ssh-%EC%9B%90%EA%B2%A9-%EC%A0%91%EC%86%8D-%ED%8F%AC%ED%8A%B8-%ED%97%88%EC%9A%A9\">2-3. NAS의 SSH 원격 접속 포트 허용</a></li>\n<li><a href=\"#2-4-nas%EC%9D%98-%EC%97%AD%EB%B0%A9%ED%96%A5-%ED%94%84%EB%A1%9D%EC%8B%9C-%EC%84%A4%EC%A0%95\">2-4. NAS의 역방향 프록시 설정</a></li>\n<li><a href=\"#2-4-%EA%B3%B5%EC%9C%A0%EA%B8%B0-%ED%8F%AC%ED%8A%B8%ED%8F%AC%EC%9B%8C%EB%94%A9-%EC%84%A4%EC%A0%95\">2-4. 공유기 포트포워딩 설정</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#3-github-actions-%EC%82%B4%ED%8E%B4%EB%B3%B4%EA%B8%B0\">3. GitHub Actions 살펴보기</a></p>\n<ul>\n<li><a href=\"#3-1-ciyml\">3-1. ci.yml</a></li>\n<li><a href=\"#3-2-cdyml\">3-2. cd.yml</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-understanding\">🤔 Understanding</a></p>\n</li>\n</ul>","frontmatter":{"date":"2025.03.31","title":"EC2에서 NAS로, 개인 서버 CI/CD 자동화","categories":"Project","author":"JH8459","emoji":"🔥"},"fields":{"slug":"/2025-03-31-PROJECT/"}},"next":{"id":"45a5dca2-a8e0-5043-b4f4-936e507bb529","frontmatter":{"date":"2025.03.19","title":"Nest CLI 뜯어보기 (nest start)","categories":"TIL","author":"JH8459","emoji":"📚"},"fields":{"slug":"/2025-03-19-TIL/"}},"prev":{"id":"eba0e70c-51e6-5384-9c0b-ce6ff6e624e2","frontmatter":{"date":"2025.04.10","title":"NestJS + TypeORM 트랜잭션을 다룰 때 반드시 피해야 할 패턴","categories":"TIL","author":"JH8459","emoji":"📚"},"fields":{"slug":"/2025-04-10-TIL/"}},"site":{"siteMetadata":{"comments":{"giscus":{"repo":"JH8459/JH8459.github.io","repoId":"R_kgDOI03HgA","category":"Comments","categoryId":"DIC_kwDOI03HgM4CtuXL"}}}}},"pageContext":{"slug":"/2025-03-31-PROJECT/","nextSlug":"/2025-03-19-TIL/","prevSlug":"/2025-04-10-TIL/"}},"staticQueryHashes":["1073350324","2009502679","2938748437","962130685"],"slicesMap":{}}