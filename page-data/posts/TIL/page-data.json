{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/TIL","result":{"pageContext":{"currentCategory":"TIL","categories":["All","CodeStates","TIL"],"edges":[{"node":{"id":"d008e06d-e1e8-5566-a908-0f6f861729bf","excerpt":"✍️ Today I Learned 1. React 프론트앤드 개발을 위한 JavaScript 오픈소스 라이브러리. 1-1. 리액트의 3가지 특징 선언형 (Declarative) 코드를 면밀히 뜯어보지 않아도, 코드를 유추할 수 있게 된다. 한 페이지를 보여주기 위해 , , 로 나눠서 적기보다는, 하나의 파일에 명시적으로 작성할 수 있게  를 활용한 선언형 프로그래밍을 지향한다. 스크린샷, 2021-08-11 10-36-42 컴포넌트 기반 (Component-Based) 컴포넌트(Component) 란 독립적인 단위모듈이다. 리액트는 하나의 기능 구현을 위해 여러 종류의 코드를 묶어둔 컴포넌트를 기반으로 개발한다. 컴포넌트로 분리하면 서로 독립적이고 재사용에 용이하기 때문에, 기능 자체에 집중하여 개발이 가능하게 된다. 스크린샷, 2021-08-11 10-41-55 범용성 리액트는 JavaScript 프로젝트 어디든 유연하게 적용될 수 있다. Facebook 에서 관리되어 안정적이고,…","fields":{"slug":"/2021-08-11-TIL/"},"frontmatter":{"categories":"CodeStates TIL","title":"React","date":"August 11, 2021"}},"next":{"fields":{"slug":"/2021-08-10-TIL/"}},"previous":null},{"node":{"id":"610ce72a-666f-51c9-bf25-6b5092d7b372","excerpt":"✍️ Today I Learned 1. 고차함수 1-1. 일급 객체 자바스크립트에는 특별한 대우를 받는 일급 객체가 있다. 대표적인 일급 객체 중 하나가 함수이다. 변수에 할당(assignment) 할 수 있다. 다른 함수의 인자(argument)로 전달될 수 있다. 다른 함수의 결과로서 리턴될 수 있다. 함수를 변수에 할당할 수 있기 때문에, 함수를 배열의 요소나 객체의 속성값으로 저장할 수 있다. 이는 함수를 데이터(, , , , )를 다루듯이 다룰 수 있다는 걸 의미한다. 변수에 할당(assignment) 할 수 있다. 이미 함수를 변수에 저장하는 방법(함수 표현식)은 학습하였다. 위의 함수 표현식(function expression)은 함수 선언식(function declaration)과 다르게 호이스팅(Hoisting)이 적용되지 않는다. 함수 선언식의 호이스팅에 지나치게 의존하면, 코드의 유지 보수가 쉽지 않다. 코드 리뷰나 디버깅을 할 때, 코드를 위아래로 왔다 갔다 하…","fields":{"slug":"/2021-08-10-TIL/"},"frontmatter":{"categories":"CodeStates TIL","title":"고차함수","date":"August 10, 2021"}},"next":{"fields":{"slug":"/2021-08-06-TIL/"}},"previous":{"fields":{"slug":"/2021-08-11-TIL/"}}},{"node":{"id":"6a70043e-f059-5db7-b9e0-7a3f5cdf2794","excerpt":"✍️ Today I Learned 1. DOM DOM( Document Object Model) 은 HTML 요소를 Object(JavaScript Object)처럼 조작(Manipulation)할 수 있는 Model이다. 즉, 자바스크립트를 사용할 수 있으면, DOM으로 HTML을 조작할 수 있다. 1-1. HTML에 JavaScript 적용하기 HTML에 JavaScript를 적용하기 위해서는  태그를 이용한다. 웹 브라우저가 작성된 코드를 해석하는 과정에서  요소를 만나면, 웹 브라우저는 HTML 해석을 잠시 추고  요소를 먼저 실행한다. 즉,  요소는 등장과 함께 실행된다. 요소는 발견즉시 해석되므로 HTML 구문이 모두 해석되기 전 실행될 수도 있다. 정의되지 않은 값이 호출되는 경우 null 이 발생되므로 되도록 HTML 구문이 모두 해석되는 시점인 앞에 쓰는걸 습관하 하자. 1-2. 부모&자식 엘리먼트 찾기 위의 HTML 코드를 보고 부모 자식간의 관계를 눈으로 찾는건 …","fields":{"slug":"/2021-08-06-TIL/"},"frontmatter":{"categories":"CodeStates TIL","title":"DOM, 유효성 검사 실습","date":"August 06, 2021"}},"next":{"fields":{"slug":"/2021-08-05-TIL/"}},"previous":{"fields":{"slug":"/2021-08-10-TIL/"}}},{"node":{"id":"f5d1fb15-4b7d-543d-a975-bd8f69ba1470","excerpt":"✍️ Today I Learned 1. Spread / Reset 문법 1-1. Spread 문법 주로 배열을 풀어서 인자로 전달하거나, 배열을 풀어서 각각의 요소로 넣을 때에 사용한다. 1-2. Rest 문법 파라미터(함수의 매개변수)를 배열의 형태로 받아서 사용할 수 있습니다. 파라미터 개수가 가변적일 때 유용합니다. 1-3. 배열에서의 Spread 문법 Spread 문법은 배열에서 강력한 힘을 발휘한다. 1-4. 객체에서 사용하기 객체의 key의 이름이 중복될 경우 후속 spread 문법을 따른다. 1-5. 함수에서 나머지 파라미터 받아오기 2. 구조 분해 (Destructing) 구조 분해 할당은 Spread 문법을 이용하여 값을 해체한 후, 개별 값을 변수에 새로 할당하는 과정을 말한다. 2-1. 분해 후 새 변수에 할당 배열 객체 함수 3. JavaScript 문제풀이 풀이 코드는 Github 참조 자바스크립트 핵심문법(클로저,스코프..등등) 문제풀이 🤔 Understan…","fields":{"slug":"/2021-08-05-TIL/"},"frontmatter":{"categories":"CodeStates TIL","title":"Spread&Rest 문법, 구조분해, JavaScript 핵심문법(스코프, 클로저..) 문제풀이","date":"August 05, 2021"}},"next":{"fields":{"slug":"/2021-08-04-TIL/"}},"previous":{"fields":{"slug":"/2021-08-06-TIL/"}}},{"node":{"id":"39346f4f-2ad9-5d1c-b137-cda870f8d579","excerpt":"✍️ Today I Learned 1. 원시 자료형과 참조 자료형. 1-1. 원시 자료형. 자바스크립트에서 원시 타입의 데이터(primitive data types; 원시 자료형)는 객체가 아니면서 method를 가지지 않는 6 가지의 타입 tring, number,bigint, boolean, undefined, symbol, (null) null은 원시 타입과 거의 같게 사용된다고 볼 수 있다. 작동 방식 또한 다른 원시 타입과 같으나, 다만 엄밀하게 따지자면 원시 타입이라고 볼 수 없는 자료형이다. 원시 자료형은 모두 “하나”의 정보, 즉, 데이터를 담고 있다. 원시 자료형은 값 자체에 대한 변경이 불가능(immutable)하지만, 변수에 다른 데이터를 할당할 수는 있다. 1-2. 참조 자료형. 자바스크립트에서 원시 자료형이 아닌 모든 것은 참조 자료형이다. 이런 자료형을 자바스크립트에서는 참조 자료형(reference data type; 참조 타입)이라고도 부른다. 대표적인 …","fields":{"slug":"/2021-08-04-TIL/"},"frontmatter":{"categories":"CodeStates TIL","title":"원시 자료형 & 참조 자료형, 스코프, 클로저","date":"August 04, 2021"}},"next":{"fields":{"slug":"/2021-08-03-TIL/"}},"previous":{"fields":{"slug":"/2021-08-05-TIL/"}}},{"node":{"id":"8982f004-075a-58ae-b18a-a40928729060","excerpt":"✍️ Today I Learned 1. 다양한 CSS 셀렉터 새로 학습한 셀렉터  attribute 셀렉터 ,  부정 셀렉터 2-1 . CSS layout 스크린샷, 2021-08-03 10-54-00 박스의 시작을 정확히 (0,0)의 위치에서 시작하고 싶은데,  태그가 가진 기본 스타일에 약간의 여백을 포함하지 않아 계산에 어려움이 있다. 위에 언급한 문제를 해결할 몇 줄의 코드를 적용시키면, 기본 스타일링을 제거하여 디자인한 대로 레이아웃을 구현할 수 있다. 이렇게 클래스 이름과 구현을 1:1로 일치시켜 아주 작은 단위로 CSS를 작성 기법을 Atomic CSS 방법론이라고 한다. 2-2. CSS layout (flexbox) flexbox로 레이아웃을 구성한다는 것은, 박스를 유연하게 늘리거나 줄여 레이아웃을 잡는 방법이다. 스크린샷, 2021-08-03 11-34-39 부모 박스요소에 display: flex를 적용해, 자식 박스의 방향과 크기를 결정한다. 기본값으로, dis…","fields":{"slug":"/2021-08-03-TIL/"},"frontmatter":{"categories":"CodeStates TIL","title":"다양한 CSS 셀렉터, CSS layout, HTML/CSS 목업 와이어프레임 실습","date":"August 03, 2021"}},"next":{"fields":{"slug":"/2021-08-02-TIL/"}},"previous":{"fields":{"slug":"/2021-08-04-TIL/"}}},{"node":{"id":"e9912086-4c94-518b-9071-72acd26df36e","excerpt":"✍️ Today I Learned 1. 객체 코플릿 객체는 배열과 다르게 순서성을 가지지 않으며, 묶음으로 된 데이터에 이름을 붙혀, 의미를 부여할 수 있다. 배열또한 각 값이 하나의 변수로 묶인 데이터이지만, 각 index가 어떤 정보를 갖고 있는지 알아야지 해당 값에 접근이 용이하다. 객체는 키쌍값(key-value pair) 으로 이루어져 있다. 스크린샷, 2021-08-02 23-44-58 객체의 값을 사용하거나 추가할 땐 Dot notation, Bracket notation 방식을 사용한다 할당된 키와 값을 지울 땐 delete 키워드를 이용해 삭제가 가능하다. 객체 안에 특정한 키가 있는지 확인이 필요할 땐, in 연산자를 이용하여 확인한다.  : 상속된 열거 가능한 속성들을 포함하여 객체에서 문자열로 키가 지정된 모든 열거 가능한 속성에 대해 반복합니다.  : 매번 반복마다 다른 속성이름(Value name)이 변수(variable)로 지정됩니다.  : 반복작업을 수행…","fields":{"slug":"/2021-08-02-TIL/"},"frontmatter":{"categories":"CodeStates TIL","title":"객체 코플릿","date":"August 02, 2021"}},"next":{"fields":{"slug":"/2021-07-30-TIL/"}},"previous":{"fields":{"slug":"/2021-08-03-TIL/"}}},{"node":{"id":"2c52f54d-9380-53b6-b56a-4744c015d10a","excerpt":"✍️ Today I Learned 1. 배열 배열은 순서가 있는 값이다. 순서는 인덱스(index)라고 부르며, 1이 아닌 0부터 매긴다. 배열의 값 접근은 인덱스를 이용하여 값에 접근한다.  대괄호를 이용해서 배열을 만드며, 각각의 원소(element)는 쉼표(comma)로 구분해준다. 배열의 속성에 접근하거나 메소드를 추가할때는 (온점)을 이용하여 접근한다.  : 온점(dot)을 이용해서 변수가 가지고 있는 속성(property)에 접근할 수 있다.  : 온점(dot)을 이용해서 관련된 명령(method)도 실행할 수 있다. 명령을 실행할 때는, 함수를 실행하듯 괄호를 열고 닫는 형태로 실행한다. 1-1. 배열의 기초 메소드 Array.isArray : 배열의 기본 type은 “object”이다. 그래서 특정 값이 배열인지 아닌지 로 판별할 수 없다. 는 배열인지 아닌지 판별할 수 있는 메소드이다. 반환값은  이다. push, pop : 배열의 뒤에서 요소를 추가 및 삭제할 수 …","fields":{"slug":"/2021-07-30-TIL/"},"frontmatter":{"categories":"CodeStates TIL","title":"배열, 객체","date":"July 30, 2021"}},"next":{"fields":{"slug":"/2021-07-29-TIL/"}},"previous":{"fields":{"slug":"/2021-08-02-TIL/"}}},{"node":{"id":"63a45b43-46e4-54d6-a438-9d3d6044d2d4","excerpt":"✍️ Today I Learned 1. Git Git이란 분산형 버전 관리 시스템(Version Control System) 의 한 종류이며, 빠른 수행 속도에 중점을 둔다. “버전 관리 시스템” 이란 파일 변화를 시간에 따라 기록했다가 이후에 특정 시점의 버전을 다시 꺼내올 수 있는 시스템이다. 동일한 정보에 대한 여러 버전을 관리하게 되며, 버전을 통해 시간적으로 변경 사항과 변경 사항을 작성한 작업자를 추적할 수 있다. 1-1. GitHub Git을 통하여 버전관리를 한다 이미 언급을하였다. 그렇다면 Github는 무엇일까? Github는 Git Repository를 관리할 수 있는 클라우드 기반 서비스이다. 즉, Git으로 버전을 관리하는 폴더에 대해서 Github을 통해 여러 사람들이 공유하고 접근할 수 있게되기때문에 Git이 분산형 버전 관리 시스템으로 불리울 수 있게된다. 1-2. Git Repository 내가 작업하는 소스 코드 폴더가 버전 관리를 받게 하기 위해서는…","fields":{"slug":"/2021-07-29-TIL/"},"frontmatter":{"categories":"CodeStates TIL","title":"Git","date":"July 29, 2021"}},"next":{"fields":{"slug":"/2021-07-28-TIL/"}},"previous":{"fields":{"slug":"/2021-07-30-TIL/"}}},{"node":{"id":"6f3c033e-32ac-5686-b188-6dcbe1052546","excerpt":"✍️ Today I Learned 1. Linux CLI 명령 줄 인터페이스(CLI, Command line interface) 또는 명령어 인터페이스는 텍스트 터미널을 통해 사용자와 컴퓨터가 상호 작용하는 방식을 뜻한다. 즉, 작업 명령은 사용자가 컴퓨터 키보드 등을 통해 문자열의 형태로 입력하며, 컴퓨터로부터의 출력 역시 문자열의 형태로 주어진다. 2. 패키지와 패키지 매니저 2-1. 패키지 리눅스에서 빈번하게 사용하는 ‘패키지’ 란 커널 및 라이브러리 버전의 배포판 환경에 맞추어 빌드한 실행파일을 압축한 것이다. 우분투 환경에서는 을 이용하기에 해당 방식을 학습하였으며, 해당 환경으로 환경을 구성하였다. 2-2. 패키지 매니저 APT(Advanced Packaging Tool) 는 데비안과 우분투를 포함하여 데비안 계열 리눅스 배포판들의 주 패키지 관리 도구이다. 3. Node.js 쉽게 말하면 JavaScript 런타임(Runtime)이다. 여기서 런타임이란 프로그래밍 언어가…","fields":{"slug":"/2021-07-28-TIL/"},"frontmatter":{"categories":"CodeStates TIL","title":"Linux CLI, 패키지와 패키지 매니저, Node.js, React","date":"July 28, 2021"}},"next":{"fields":{"slug":"/2021-07-27-TIL/"}},"previous":{"fields":{"slug":"/2021-07-29-TIL/"}}},{"node":{"id":"c71b3930-df22-5eb2-8db8-23ff0f1af820","excerpt":"✍️ Today I Learned 1. 계산기 실습 : github repository 스크린샷, 2021-08-04 23-13-16 🤔 Understanding 점점.. 수업 내용을 한번에 따라잡기가 어렵다. 장기전이다, 멘탈 관리. 모르는 부분이있다면 붙잡고 끙끙 앓기보다는 조금더 학습 후 주말중 부족한 부분을 다시 학습하여 멘탈 관리 및 부족한 부분을 메꿔나가야 할 듯 하다. CSS .. 만만히 볼 분야가 절대 아니다. JS를 통하여 CSS를 조작하거나 제어하는 분야 말고도 특정한 상태나 규칙에 따라 CSS 스스로 동작하는 선택자들 또한 존재하였다. CSS로 인해 단순 코드 몇줄 만으로도 코드가 다이나믹해지는 효과를 볼 수 있다. 선택자에는 태그, id, class만 선택되는줄 알았는데 복합선택자, 부모/자식 개념까지 으.. 절대 만만하지 않다. ✍️ Today I Learned 1. 계산기 실습 : github repository 🤔 Understanding","fields":{"slug":"/2021-07-27-TIL/"},"frontmatter":{"categories":"CodeStates TIL","title":"계산기 실습 (Nightmare)","date":"July 27, 2021"}},"next":{"fields":{"slug":"/2021-07-26-TIL/"}},"previous":{"fields":{"slug":"/2021-07-28-TIL/"}}},{"node":{"id":"c8cabb62-eb8d-56f6-93c5-0d8533bb110b","excerpt":"✍️ Today I Learned 1. 계산기 실습 : github repository 스크린샷, 2021-08-04 23-11-14 🤔 Understanding , ,  세분화 된 학습이 아닌, 세가지의 모든 기능을 더한 웹페이지 만들기는 생각보다 상호간 작용을 염두해야 원활이 구현된다. ✍️ Today I Learned 1. 계산기 실습 : github repository 🤔 Understanding","fields":{"slug":"/2021-07-26-TIL/"},"frontmatter":{"categories":"CodeStates TIL","title":"계산기 실습","date":"July 26, 2021"}},"next":{"fields":{"slug":"/2021-07-23-TIL/"}},"previous":{"fields":{"slug":"/2021-07-27-TIL/"}}},{"node":{"id":"e4a8365d-08d9-5ce2-9e40-4295904aa782","excerpt":"✍️ Today I Learned 1. CSS CSS 문법 css문법 선택자(selector) 에는 태그이름이나 id 또는 클래스 등이 올수있다. 선택자로 특정 요소를 선택할수 있으며, 선택 후 중괄호 안의 선언 블럭에서 이 선택자에 적용 할 내용들을 작성한다. id는 한 문서에 단 하나의 id 값을 가질수 있으며  기호를 이용하여 선택한다. class는 동일한 기능을 하는 css를 여러 요소에 적용하기 위해 선택되며  기호를 이용하여 선택한다. 속성은 선택자 안에 요소로써 적용할 수 있는 내용이다. 속성과 값의 끝에는 세미콜론 을 붙여 속성끼리 구분한다. 다양한 속성 값은 해당링크에서 참조하자 CSS 참고서 -MDN. 박스모델은 레이아웃 설계시 가장 주의하여 구성해야 한다. (줄바꿈이 되는 박스(block), 옆으로 붙는 박스(inline, inline-block)가 있기에 설계시 미리 계획 후 설계해야한다.)  block inline-block inline 줄바꿈 여부 O X X…","fields":{"slug":"/2021-07-23-TIL/"},"frontmatter":{"categories":"CodeStates TIL","title":"소비자들과 맞닿는 영역의 CSS","date":"July 23, 2021"}},"next":{"fields":{"slug":"/2021-07-22-TIL/"}},"previous":{"fields":{"slug":"/2021-07-26-TIL/"}}},{"node":{"id":"59993350-7ff9-505e-8493-364071e93be7","excerpt":"✍️ Today I Learned 1. 반복문 코플릿 오늘 학습한 내용 중 가장 인상 깊었던 코드 풀이를 다시 한번 복습해보겠다. 핵심 포인트는 임의의 수를 입력받아 홀수인지 아닌지 여부를 리턴해야 한다. 반복문(while)문을 사용해야 합니다. 나눗셈(/), 나머지(%) 연산자 사용은 금지됩니다. 0은 짝수로 간주합니다. 🤔 Understanding 시간이 어디로 사라진거지?.. 반복문 개념학습은 1시간 코드풀이는 5시간.., 이중반복문은 조금 많이많이 애먹었지만 확실히 문제를 풀어가며 pair와 함께 머리를 맞대며 도출해내는 과정은 희열감이 느껴지기도 했다. 확실히 개념 수업보단 직접 짜본 내 코드들을 디버깅해가는 과정이 학습에는 더욱 도움이 되는 듯 하였다. 실제로 시간이 금방금방 지나가는 기적을 겪였다… 기본 수업 외에 오늘은 추가 학습을 못한듯하다… 어젠 분명 리액트 수업이 재밌었는데.. 개발환경 구축하고 나니 오늘은 터미널을 켜보지도 못했다. 스트레스 컨트롤도 중요하다. …","fields":{"slug":"/2021-07-22-TIL/"},"frontmatter":{"categories":"CodeStates TIL","title":"반복문 코플릿","date":"July 22, 2021"}},"next":{"fields":{"slug":"/2021-07-21-TIL/"}},"previous":{"fields":{"slug":"/2021-07-23-TIL/"}}},{"node":{"id":"410e2f05-a6a1-5598-9c62-871207831d64","excerpt":"✍️ Today I Learned 1. 문자열 문자열은 배열처럼 요소 하나씩 접근이 가능하다. index로 접근은 가능하지만 쓸 수는 없다는 (read-only) 특징을 가진다. 문자열은 + 연산자를 쓸 수 있다. string 타입과 다른 타입 사이에 + 연산자를 쓰면, string 형식으로 변환된다. (toString) 문자열의 표현방식중 템플릿 리터럴은 내장된 표현식을 허용하는 문자열 리터럴이다. 여러 줄로 이뤄진 문자열과 문자 보간기능을 사용할 수 있다. 이전 버전의 ES2015사양 명세에서는 “template strings” (템플릿 문자열) 라고 불려 왔다.\nES6는 템플릿 리터럴(Template literal) 이라고 불리는 새로운 문자열 표기법을 도입하였다. 템플릿 리터럴은 일반 문자열과 비슷해 보이지만, ‘ 또는 “ 같은 통상적인 따옴표 문자 대신 백틱(backtick) 문자 ` 를 사용한다. 2. 호이스팅 함수 안에 있는 선언들을 모두 끌어 올려서 해당 함수 유효범위…","fields":{"slug":"/2021-07-21-TIL/"},"frontmatter":{"categories":"CodeStates TIL","title":"문자열, 호이스팅, React","date":"July 21, 2021"}},"next":{"fields":{"slug":"/2021-07-20-TIL/"}},"previous":{"fields":{"slug":"/2021-07-22-TIL/"}}},{"node":{"id":"46c59097-84f7-5b08-999b-47ff07a4c755","excerpt":"✍️ Today I Learned 1. 변수 변수를 이용하면 데이터를 편리하게 저장하고 꺼내 쓸 수 있게 한다. 변수의 선언과 값의 할당에 대해서 학습하였다. 선언(declaration)을 통하여 변수를 선언할 수 있다. 할당(assignment)을 통하여 변수에 값을 저장하게 된다. 이때 사용되는 ’=‘은 같다라는 뜻이 아닌 ‘할당 연산자(Assignment operator)‘이다. var, let, const 선언방식의 차이점을 학습하였다.  var let const 중복선언 O X X 재할당 O O X 변수명은 다음의 규칙에 따라 명명된다.  Camel Case  할당이 없는 변수의 경우  값을 가진다. (값이 없는게 아닌 해당 값을 가진다) 2. 타입 원시 자료형, 참조 자료형을 학습하였다. typeof 연산자를 통하여 특정 갑의 타입을 확인할 수 있다. 3. 함수 함수는 “작은 기능의 단위”이며 키워드(keyword), 이름(name), 매개변수(parameter), 몸통(…","fields":{"slug":"/2021-07-20-TIL/"},"frontmatter":{"categories":"CodeStates TIL","title":"변수, 타입, 함수, 조건문, HTML","date":"July 20, 2021"}},"next":{"fields":{"slug":"/2021-07-19-TIL/"}},"previous":{"fields":{"slug":"/2021-07-21-TIL/"}}},{"node":{"id":"68f68db4-155c-5b66-b94d-803488d97f40","excerpt":"✍️ Today I Learned 1. 학습 툴 셋팅 리눅스(Ubuntu OS) 환경에 기본 개발환경 구축. 🤔 Understanding 코드스테이츠 1일차 OT를 받았다.\n앞으로의 강의 일정 및 학습 방식에 대해서 설명을 들었다. 오늘은 강의라기보다는 줌을 통해서 코드스테이츠 강사분들과 소통한 느낌을 받았다. 오늘 OT의 중점은 “자기주도적 학습”.\n모든 커리큘럼이 온라인을 통하여 수업이 진행되며 질문 또한 “Agora States”라는 웹사이트를 통해 진행되기때문에.. 커리큘럼을 완주하려면 스스로 커리큘럼을 지키려 노력을 해야한다. 이러한 학습태도는 앞으로 수료시점까지는 당연하며 개발자로써 평생 몸에 지녀야할 기본소양이라 느껴진다. 평생 공부해야지.. ✍️ Today I Learned 1. 학습 툴 셋팅 🤔 Understanding","fields":{"slug":"/2021-07-19-TIL/"},"frontmatter":{"categories":"CodeStates TIL","title":"코드스테이츠 1일차","date":"July 19, 2021"}},"next":null,"previous":{"fields":{"slug":"/2021-07-20-TIL/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}